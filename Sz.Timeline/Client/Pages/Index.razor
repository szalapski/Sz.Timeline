@page "/"
@using System.Diagnostics

<PageTitle>Index</PageTitle>

<div class="full-height-box">
    <section class="main-content">

        <div class="timeline-pane">

            <div class="vertical-timeline">
                <div class="beginning-year">@StartYear</div>
                <div class="event-region">
                    @for(int i=0; i < Items.Count; ++i)
                    {
                        <div class="timeline-marker"
                            style=" top: calc(@(GetPositionPercentage(Items[i].Date))% - .78em);">
                            @(Items[i].Name ?? (i+1).ToString())
                        </div>
                    }
                </div>
                <div class="end-year">@EndYear</div>

            </div>
            <ol class="items-list">

                @foreach (var item in Items)
                {
                    <li><em>@item.Date.Year</em> @item.Description</li>
                }

            </ol>
        </div>


        <div class="source-pane">
            <p>Enter events, one per line, in the format <code>YYYY Name Event description</code> </p>

            <textarea rows="25" cols="80" value="@ItemsText" @onchange="ParseEventsInOrder">        </textarea>
        </div>


    </section>
</div>

@code {
    private string ItemsText { get; set; } = @"
170 MarcusAurelius
1619 Descartes  I am thinking, therefore I am; everything further is unsure (Cartesian doubt, rationalism) 
1776 Hume  Basic reliability of sense perception (natural foundationalism, empiricism); The self is a bundle of experiences and there is no “owner”; it cannot even be said that we are aware of our selves; No existence is necessary; we can conceive that God doesn’t exist.
1953 Wittgenstein  if mind and body are separate, we can’t assume anyone thinks like we do (beetle)
1660 Spinoza  Hard determinism: the past (and nothing else) brings about the present and future
1781 Kant  “Freedom” of clockwork
1839 Shopenhauer  Compatibilism: “could have done otherwise” means “would have done otherwise if they had chosen differently and would have chosen differently under certain circumstances”
1690 Locke  The same man can be inhabited by different persons; I am not the man I was 30 years ago.
1781 Kant  My experiences are mine (they require me to even exist)--they require self-consciousness; “I” is the point-of-view from which experience starts. Experiences are not things in their own right.
1785 Reid  The self/soul is simple, not composite.
1641 Descartes  Trademark argument: I exist and have the idea of God, for he placed this idea in me as the mark of the craftsman stamped on his work.
1078 Anselm  Ontological argument: God can be conceived, therefore he must exist in reality. (Suppose he doesn’t; then a greater being can be conceived, that is, one who exists)
1250 ThomasAquinas  Cosmological argument: all things observable are caused, so there must be an uncaused necessary first cause that self-exists and was not caused.
1658 Pascal  Pascal’s Wager
1953 Wittgenstein  If God is incomprehensible, “A nothing will serve just as well as a something about which nothing could be said.”
1825 Coleridge  “He who begins by loving Christianity better than truth will proceed by loving his own Church better than Christianity and end in loving himself better than all.”
";

    private List<TimelineEvent> Items { get; set; } = new();

    protected override void OnInitialized()
    {
        Console.WriteLine(ItemsText);
        base.OnInitialized();
        ParseEventsInOrder(ItemsText);
    }

    private void ParseEventsInOrder(ChangeEventArgs args) => ParseEventsInOrder(args.Value as string);

    private void ParseEventsInOrder(string? itemsText)
    {
        Items = itemsText == null ? new() : ParseTimelineEvents(itemsText).OrderBy(i => i.Date).ToList();
    }


    private DateOnly? Start => Items.Any() ? new(Items.First().Date.Year, 1, 1) : null;
    private DateOnly? End => Items.Any() ? new(Items.Last().Date.Year + 1, 1, 1): null;

    private int? StartYear => Start?.Year;
    private int? DisplayStartYear => StartYear == null ? null : StartYear - 1;
    private int? EndYear => End?.Year;

    private int? DaysInTimeline => Items.Any() ? End!.Value.DayNumber - Start!.Value.DayNumber : null;

    private decimal GetPositionPercentage(DateOnly date)
    {
        if (date < Start || date > End) throw new ArgumentOutOfRangeException(nameof(date));
        return Items.Any() ? 100m * ((decimal)(date.DayNumber - Start!.Value.DayNumber))/DaysInTimeline!.Value : 0;
    }

    private IEnumerable<TimelineEvent> ParseTimelineEvents(string itemsText)
    {
        Stopwatch watch = Stopwatch.StartNew();
        foreach (string eventText in itemsText.Split(Environment.NewLine))
        {
            string[] tokens = eventText.Split(' ');

            bool gotDate = DateOnly.TryParse(tokens.FirstOrDefault(), out DateOnly date);
            if (!gotDate)
            {
                // TODO: year-only events
                bool gotYear = int.TryParse(tokens.FirstOrDefault(), out int year);
                if (gotYear) date = new DateOnly(year, 1, 1);
                else continue;
            }

            string? name = tokens.Skip(1).FirstOrDefault();

            string theRest = string.Join(" ", tokens.Skip(2));

            yield return new TimelineEvent(date, name, theRest);
        }
        watch.Stop();
        Console.WriteLine($"parsing took {watch.ElapsedMilliseconds} ms");
    }


    private record TimelineEvent(DateOnly Date, string? Name, string Description);
}